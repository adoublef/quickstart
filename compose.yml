networks:
  net_smtp:
  net_otel:
  net_toxi:

volumes:
  tempo:

services:
  quickstart:
    container_name: quickstart
    image: go.tmp/quickstart:0.1.0
    platform: &platform linux/arm64
    build:
      context: .
      # uncomment to use chainguard registry instead
      args:
        - REGISTRY=cgr.dev
      platforms:
        - linux/arm64
        - linux/amd64
    command: ["serve", "-addr=:8080", "-rate=1000/60s"]
    environment:
      - OTEL_SERVICE_NAME=quickstart
      - OTEL_RESOURCE_ATTRIBUTES=deployment.environment=staging,service.namespace=x,service.version=0.1,service.instance.id=localhost:8080
      - OTEL_EXPORTER_OTLP_INSECURE=true # use http instead of https (needed because of https://github.com/open-telemetry/opentelemetry-go/issues/4834)
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
    ports:
      - "8080:8080"
    networks:
      - net_smtp
      - net_otel
      - net_toxi
    restart: unless-stopped

  smtp:
    container_name: quickstart_stmp
    image: oryd/mailslurper:latest-smtps
    ports:
      - "4436:4436" # ui
      - "4437:4437"
    networks:
      - net_smtp
    restart: always

  grafana:
    container_name: quickstart_dash
    image: grafana/grafana-enterprise:11.2.0
    platform: *platform
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor traceQLStreaming metricsSummary
    volumes:
      - ./etc/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./etc/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000" # ui
    networks:
      - net_otel
    restart: always

  toxiproxy:
    container_name: quickstart_toxi
    image: ghcr.io/shopify/toxiproxy:latest
    platform: *platform
    command:
      - -host=0.0.0.0 # ?
      - -config=proxies.json
    volumes:
      - ./etc/shopify/toxiproxy/proxies.json:/proxies.json
    ports:
      - "8474:8474" # api
      - "4318" # otel
    networks:
      - net_toxi
      - net_otel
    restart: always

  # And put them in an OTEL collector pipeline...
  otel-collector:
    container_name: quickstart_otel
    image: otel/opentelemetry-collector-contrib:0.105.0
    platform: *platform
    command:
      - --config=/etc/collector.yml
    volumes:
      - ./etc/otel/collector.yml:/etc/collector.yml
    ports:
      - "4317" # grpc
      - "4318" # http
      - "9090" # metrics
    networks:
      - net_otel
    restart: always

  # Tempo runs as user 10001, and docker compose creates the volume as root.
  # As such, we need to chown the volume in order for Tempo to start correctly.
  init:
    container_name: quickstart_tempo_init
    image: &tempo grafana/tempo:main-807435d
    platform: *platform
    user: root
    entrypoint:
      - "chown" # not working with chainguard
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - tempo:/var/tempo

  tempo:
    container_name: quickstart_tempo
    image: *tempo
    command:
      - -config.file=/etc/tempo.yml
    platform: *platform
    volumes:
      - ./etc/grafana/tempo/tempo.yml:/etc/tempo.yml
      - tempo:/var/tempo
    ports:
      - "14268" # jaeger ingest
      - "3200" # tempo
      - "4317" # otlp grpc
      - "4318" # otlp http
      - "9411" # zipkin
    networks:
      - net_otel
    restart: always
    depends_on:
      - init

  loki:
    container_name: quickstart_loki
    image: grafana/loki:latest
    platform: *platform
    command: -config.file=/etc/loki/loki.yml
    volumes:
      - ./etc/grafana/loki:/etc/loki
    ports:
      - "3100"
    networks:
      - net_otel
    restart: always

  prometheus:
    container_name: quickstart_prom
    image: prom/prometheus:v2.54.1
    platform: *platform
    command:
      - --config.file=/etc/prometheus.yml
      - --web.enable-remote-write-receiver
      - --enable-feature=exemplar-storage
      - --enable-feature=native-histograms
    volumes:
      - ./etc/prometheus/prometheus.yml:/etc/prometheus.yml
    ports:
      - "9090:9090" #Â ui
    networks:
      - net_otel
    restart: always

  influxdb:
    container_name: quickstart_influx
    image: influxdb:1.8.10
    platform: *platform
    environment:
      - INFLUXDB_DB=k6
      - INFLUXDB_HTTP_MAX_BODY_SIZE=0
    ports:
      - "8086"
    networks:
      - net_otel
    restart: always
